/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.tester;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Admin;
import model.Car;


/**
 *
 * @author Eva
 */
public class SearchJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SearchCarJPanel
     */
    private JPanel workAreaJPanel;
    private Admin admin;


    
    public SearchJPanel(JPanel wajp, Admin a) {
        initComponents();
        setSize(600,600);
        workAreaJPanel =wajp;
        admin = a;


        refreshTable();
    }
    
        public void refreshTable() {

        DefaultTableModel model = (DefaultTableModel) tblSearch.getModel();
        model.setRowCount(0);

        for (Car c : admin.getCarCatalog().getCarcatalog()) {
            Object row[] = new Object[10];
            row[0] = c;
            row[1] = c.getCarId();
            row[2] = c.getCarBrand();
            row[3] = c.getCarModel();
            row[4] = c.getCarCity();
            row[5] = c.getCarYear();
            row[6] = c.getCarSeat();
            row[7] = c.getIsAvail();
            row[8] = c.getIsExpired();
            row[9] = c.getTime();

            model.addRow(row);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtYear = new javax.swing.JTextField();
        SearchScrollPane = new javax.swing.JScrollPane();
        tblSearch = new javax.swing.JTable();
        btnAllBrands = new javax.swing.JButton();
        btnId = new javax.swing.JButton();
        btnAvail = new javax.swing.JButton();
        txtId = new javax.swing.JTextField();
        lblNumOfAvail = new javax.swing.JLabel();
        btnBrand = new javax.swing.JButton();
        lblNumOfNotAvail = new javax.swing.JLabel();
        txtBrand = new javax.swing.JTextField();
        btnFirst = new javax.swing.JButton();
        btnExpired = new javax.swing.JButton();
        txtSeatsX = new javax.swing.JTextField();
        btnYear = new javax.swing.JButton();
        btnSeats = new javax.swing.JButton();
        lblSearchTitle = new javax.swing.JLabel();
        btnCity = new javax.swing.JButton();
        btnModel = new javax.swing.JButton();
        txtCity = new javax.swing.JTextField();
        txtSeatsY = new javax.swing.JTextField();
        txtModel = new javax.swing.JTextField();
        btnViewAll = new javax.swing.JButton();
        txtNumOfAvail = new javax.swing.JTextField();
        txtNumOfNotAvail = new javax.swing.JTextField();
        txtTime = new javax.swing.JTextField();
        btnTime = new javax.swing.JButton();
        lblTime = new javax.swing.JLabel();

        txtYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtYearActionPerformed(evt);
            }
        });

        tblSearch.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Id", "Brand", "Model", "City", "Year", "Seats", "IsAvail", "IsExpired", "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SearchScrollPane.setViewportView(tblSearch);

        btnAllBrands.setText("Find All Car Brands");
        btnAllBrands.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllBrandsActionPerformed(evt);
            }
        });

        btnId.setText("Search by Id");
        btnId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIdActionPerformed(evt);
            }
        });

        btnAvail.setText("Find Available Cars");
        btnAvail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAvailActionPerformed(evt);
            }
        });

        txtId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdActionPerformed(evt);
            }
        });

        lblNumOfAvail.setText("Num of Available:   ");

        btnBrand.setText("Search by Brand");
        btnBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrandActionPerformed(evt);
            }
        });

        lblNumOfNotAvail.setText("Num of not Available:   ");

        txtBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBrandActionPerformed(evt);
            }
        });

        btnFirst.setText("Find 1st Available Car");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });

        btnExpired.setText("Find All Expired Cars");
        btnExpired.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExpiredActionPerformed(evt);
            }
        });

        txtSeatsX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSeatsXActionPerformed(evt);
            }
        });

        btnYear.setText("Search by Year");
        btnYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnYearActionPerformed(evt);
            }
        });

        btnSeats.setText("Search by Seats");
        btnSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeatsActionPerformed(evt);
            }
        });

        lblSearchTitle.setFont(new java.awt.Font("微软雅黑", 1, 18)); // NOI18N
        lblSearchTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSearchTitle.setText("Search Fleet Information");

        btnCity.setText("Search by City");
        btnCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCityActionPerformed(evt);
            }
        });

        btnModel.setText("Search by Model");
        btnModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModelActionPerformed(evt);
            }
        });

        txtCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCityActionPerformed(evt);
            }
        });

        txtSeatsY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSeatsYActionPerformed(evt);
            }
        });

        txtModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModelActionPerformed(evt);
            }
        });

        btnViewAll.setText("View All Cars");
        btnViewAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAllActionPerformed(evt);
            }
        });

        txtNumOfAvail.setEditable(false);
        txtNumOfAvail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumOfAvailActionPerformed(evt);
            }
        });

        txtNumOfNotAvail.setEditable(false);
        txtNumOfNotAvail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumOfNotAvailActionPerformed(evt);
            }
        });

        txtTime.setEditable(false);
        txtTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimeActionPerformed(evt);
            }
        });

        btnTime.setText("Find latest Update Time");
        btnTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimeActionPerformed(evt);
            }
        });

        lblTime.setText("Latest Update Time:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSearchTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SearchScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnExpired, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                                .addComponent(btnAllBrands, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblTime)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblNumOfNotAvail)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtNumOfNotAvail, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(lblNumOfAvail)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtNumOfAvail, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnAvail, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtModel, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(txtBrand, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(txtCity, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(txtYear, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(txtSeatsX, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtSeatsY, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnCity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnModel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnId, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnBrand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnYear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSeats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnViewAll, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSearchTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SearchScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnFirst)
                            .addComponent(btnId)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnModel)
                            .addComponent(txtModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnExpired))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnBrand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txtBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnAllBrands)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCity)
                            .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTime))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnYear)
                            .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblTime)
                        .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSeats)
                    .addComponent(txtSeatsY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAvail)
                    .addComponent(txtSeatsX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNumOfAvail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNumOfAvail))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNumOfNotAvail)
                            .addComponent(txtNumOfNotAvail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btnViewAll, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(145, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtYearActionPerformed

    private void btnAllBrandsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllBrandsActionPerformed
        // TODO add your handling code here:
        populateCarTableAllBrand();
    }//GEN-LAST:event_btnAllBrandsActionPerformed

    private void btnIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIdActionPerformed
        // TODO add your handling code here:
        String carId = txtId.getText();
        populateCarTableById(carId);
    }//GEN-LAST:event_btnIdActionPerformed

    private void btnAvailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAvailActionPerformed
        // TODO add your handling code here:
        populateCarTableAllAvail();
    }//GEN-LAST:event_btnAvailActionPerformed

    private void txtIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdActionPerformed

    private void btnBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrandActionPerformed
        // TODO add your handling code here:
        String carBrand = txtBrand.getText();
        populateCarTableByBrand(carBrand);
    }//GEN-LAST:event_btnBrandActionPerformed

    private void txtBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBrandActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBrandActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        // TODO add your handling code here:
        populateCarTableFirstAvail();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnExpiredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpiredActionPerformed
        // TODO add your handling code here:
        populateCarTableAllExpired();
    }//GEN-LAST:event_btnExpiredActionPerformed

    private void txtSeatsXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSeatsXActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSeatsXActionPerformed

    private void btnYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnYearActionPerformed
        // TODO add your handling code here:
        String carYear = txtYear.getText();
        populateCarTableByYear(carYear);
    }//GEN-LAST:event_btnYearActionPerformed

    private void btnSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeatsActionPerformed
        // TODO add your handling code here:
        int carSeatX = Integer.parseInt(txtSeatsX.getText());
        int carSeatY = Integer.parseInt(txtSeatsY.getText());
        populateCarTableBySeat(carSeatX,carSeatY);
    }//GEN-LAST:event_btnSeatsActionPerformed

    private void btnCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCityActionPerformed
        // TODO add your handling code here:
        String carCity = txtCity.getText();
        populateCarTableByCity(carCity);
    }//GEN-LAST:event_btnCityActionPerformed

    private void btnModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModelActionPerformed
        // TODO add your handling code here:
        String carModel = txtModel.getText();
        populateCarTableByModel(carModel);
    }//GEN-LAST:event_btnModelActionPerformed

    private void txtCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCityActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtCityActionPerformed

    private void txtSeatsYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSeatsYActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSeatsYActionPerformed

    private void txtModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModelActionPerformed

    private void btnViewAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAllActionPerformed
        // TODO add your handling code here:
        refreshTable();
    }//GEN-LAST:event_btnViewAllActionPerformed

    private void txtNumOfAvailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumOfAvailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumOfAvailActionPerformed

    private void txtNumOfNotAvailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumOfNotAvailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumOfNotAvailActionPerformed

    private void txtTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimeActionPerformed

    private void btnTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimeActionPerformed
        try {
            // TODO add your handling code here:
            showLatestTime();
        } catch (ParseException ex) {
            Logger.getLogger(SearchJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnTimeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane SearchScrollPane;
    private javax.swing.JButton btnAllBrands;
    private javax.swing.JButton btnAvail;
    private javax.swing.JButton btnBrand;
    private javax.swing.JButton btnCity;
    private javax.swing.JButton btnExpired;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnId;
    private javax.swing.JButton btnModel;
    private javax.swing.JButton btnSeats;
    private javax.swing.JButton btnTime;
    private javax.swing.JButton btnViewAll;
    private javax.swing.JButton btnYear;
    private javax.swing.JLabel lblNumOfAvail;
    private javax.swing.JLabel lblNumOfNotAvail;
    private javax.swing.JLabel lblSearchTitle;
    private javax.swing.JLabel lblTime;
    private javax.swing.JTable tblSearch;
    private javax.swing.JTextField txtBrand;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtModel;
    private javax.swing.JTextField txtNumOfAvail;
    private javax.swing.JTextField txtNumOfNotAvail;
    private javax.swing.JTextField txtSeatsX;
    private javax.swing.JTextField txtSeatsY;
    private javax.swing.JTextField txtTime;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables

    private void populateCarTableById(String keyword) {

        DefaultTableModel model = (DefaultTableModel) tblSearch.getModel();
        model.setRowCount(0);

        for (Car c: admin.getCarCatalog().getCarcatalog()) {
            if (String.valueOf(c.getCarId()).equals(keyword)) {
                Object row[] = new Object[10];
                row[0] = c;
                row[1] = c.getCarId();
                row[2] = c.getCarBrand();
                row[3] = c.getCarModel();
                row[4] = c.getCarCity();
                row[5] = c.getCarYear();
                row[6] = c.getCarSeat();
                row[7] = c.getIsAvail();
                row[8] = c.getIsExpired();
                row[9] = c.getTime();
                model.addRow(row);
                }
            }
        
    }
    
        private void populateCarTableByModel(String keyword) {

        DefaultTableModel model = (DefaultTableModel) tblSearch.getModel();
        model.setRowCount(0);

        for (Car c: admin.getCarCatalog().getCarcatalog()) {
            if (c.getCarModel().equals(keyword)) {
                Object row[] = new Object[10];
                row[0] = c;
                row[1] = c.getCarId();
                row[2] = c.getCarBrand();
                row[3] = c.getCarModel();
                row[4] = c.getCarCity();
                row[5] = c.getCarYear();
                row[6] = c.getCarSeat();
                row[7] = c.getIsAvail();
                row[8] = c.getIsExpired();
                row[9] = c.getTime();
                model.addRow(row);
                }
            }
        
    }
        
        private void populateCarTableByBrand(String keyword) {

        DefaultTableModel model = (DefaultTableModel) tblSearch.getModel();
        model.setRowCount(0);

        for (Car c: admin.getCarCatalog().getCarcatalog()) {
            if (c.getCarBrand().equals(keyword)) {
                Object row[] = new Object[10];
                row[0] = c;
                row[1] = c.getCarId();
                row[2] = c.getCarBrand();
                row[3] = c.getCarModel();
                row[4] = c.getCarCity();
                row[5] = c.getCarYear();
                row[6] = c.getCarSeat();
                row[7] = c.getIsAvail();
                row[8] = c.getIsExpired();
                row[9] = c.getTime();
                model.addRow(row);
                }
            }
    }
        

        private void populateCarTableByYear(String keyword) {

        DefaultTableModel model = (DefaultTableModel) tblSearch.getModel();
        model.setRowCount(0);

        for (Car c: admin.getCarCatalog().getCarcatalog()) {
            if (c.getCarYear().equals(keyword)) {
                Object row[] = new Object[10];
                row[0] = c;
                row[1] = c.getCarId();
                row[2] = c.getCarBrand();
                row[3] = c.getCarModel();
                row[4] = c.getCarCity();
                row[5] = c.getCarYear();
                row[6] = c.getCarSeat();
                row[7] = c.getIsAvail();
                row[8] = c.getIsExpired();
                row[9] = c.getTime();
                model.addRow(row);
                }
            }
    }
      
      
        private void populateCarTableByCity(String keyword) {

        DefaultTableModel model = (DefaultTableModel) tblSearch.getModel();
        model.setRowCount(0);

        for (Car c: admin.getCarCatalog().getCarcatalog()) {
            if (c.getCarCity().equals(keyword)) {
                Object row[] = new Object[10];
                row[0] = c;
                row[1] = c.getCarId();
                row[2] = c.getCarBrand();
                row[3] = c.getCarModel();
                row[4] = c.getCarCity();
                row[5] = c.getCarYear();
                row[6] = c.getCarSeat();
                row[7] = c.getIsAvail();
                row[8] = c.getIsExpired();
                row[9] = c.getTime();
                model.addRow(row);
                }
            }
    }
  
        private void populateCarTableBySeat(int x, int y) {

        DefaultTableModel model = (DefaultTableModel) tblSearch.getModel();
        model.setRowCount(0);

        for (Car c: admin.getCarCatalog().getCarcatalog()) {
            int seatNum = Integer.parseInt(c.getCarSeat());
            if (seatNum>= x && seatNum <= y) {
                Object row[] = new Object[10];
                row[0] = c;
                row[1] = c.getCarId();
                row[2] = c.getCarBrand();
                row[3] = c.getCarModel();
                row[4] = c.getCarCity();
                row[5] = c.getCarYear();
                row[6] = c.getCarSeat();
                row[7] = c.getIsAvail();
                row[8] = c.getIsExpired();
                row[9] = c.getTime();
                model.addRow(row);
                }
            }
    }
        
     
        private void populateCarTableAllExpired() {

        DefaultTableModel model = (DefaultTableModel) tblSearch.getModel();
        model.setRowCount(0);

        for (Car c: admin.getCarCatalog().getCarcatalog()) {
            if (c.getIsExpired().equals("Yes")) {
                Object row[] = new Object[10];
                row[0] = c;
                row[1] = c.getCarId();
                row[2] = c.getCarBrand();
                row[3] = c.getCarModel();
                row[4] = c.getCarCity();
                row[5] = c.getCarYear();
                row[6] = c.getCarSeat();
                row[7] = c.getIsAvail();
                row[8] = c.getIsExpired();
                row[9] = c.getTime();
                model.addRow(row);
                }
            }
    }
        
        private void populateCarTableAllAvail() {

        DefaultTableModel model = (DefaultTableModel) tblSearch.getModel();
        model.setRowCount(0);
        int count =0;

        for (Car c: admin.getCarCatalog().getCarcatalog()) {
            count ++;
            if (c.getIsAvail().equals("Yes")) {
                Object row[] = new Object[10];
                row[0] = c;
                row[1] = c.getCarId();
                row[2] = c.getCarBrand();
                row[3] = c.getCarModel();
                row[4] = c.getCarCity();
                row[5] = c.getCarYear();
                row[6] = c.getCarSeat();
                row[7] = c.getIsAvail();
                row[8] = c.getIsExpired();
                row[9] = c.getTime();
                model.addRow(row);
                }
            }
        int availNum =model.getRowCount();
        txtNumOfAvail.setText(String.valueOf(availNum));
        txtNumOfNotAvail.setText(String.valueOf(count-availNum));
     
    }
        
        private void populateCarTableFirstAvail() {

        DefaultTableModel model = (DefaultTableModel) tblSearch.getModel();
        model.setRowCount(0);
        int count =0;
            for (Car c: admin.getCarCatalog().getCarcatalog()) {
                
                if (c.getIsAvail().equals("Yes")&& count<1) {
                    Object row[] = new Object[10];
                    row[0] = c;
                    row[1] = c.getCarId();
                    row[2] = c.getCarBrand();
                    row[3] = c.getCarModel();
                    row[4] = c.getCarCity();
                    row[5] = c.getCarYear();
                    row[6] = c.getCarSeat();
                    row[7] = c.getIsAvail();
                    row[8] = c.getIsExpired();
                    row[9] = c.getTime();
                    model.addRow(row);
                    count ++;
                }
            }
        
    }
        
        
        private void populateCarTableAllBrand() {

        DefaultTableModel model = (DefaultTableModel) tblSearch.getModel();
        model.setRowCount(0);
        Object brand = "";

            for (Car c: admin.getCarCatalog().getCarcatalog()) {
                
                    Object row[] = new Object[10];
                    if(!c.getCarBrand().equals(brand)){
                        row[2] = c.getCarBrand();
                        brand = row[2];
                        model.addRow(row);
                    }
             }
            

    }

    private void showLatestTime() throws ParseException {
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
       
        Date time = df.parse("0000-00-00 00:00:00");
        for (Car c: admin.getCarCatalog().getCarcatalog()){
            Date ctime =df.parse(c.getTime());
            if(time.getTime()<ctime.getTime()){
                time = ctime;
            }
        }
        String timestring =df.format(time);
        txtTime.setText(timestring);
        
        
        
        
        
        
        
        
     
        
        
        }
        
        
        
        
        
        
        
    
                





}
