/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.manage;

import java.awt.CardLayout;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Admin;
import model.Encounter;
import model.Patient;

/**
 *
 * @author Eva
 */
public class ManageJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageJPanel
     */
    
    private JPanel workAreaJPanel;
    private Admin admin;
    private Patient patient;
    
    public ManageJPanel(JPanel wajp, Admin a) {
        initComponents();
        setSize(600,600);
        workAreaJPanel =wajp;
        admin = a;
        
        refreshTable();
        
         cmbSelectCommunity.setModel(new DefaultComboBoxModel<>(new String[]{
        "Northeastern","Southeastern"

        }));
         
         cmbSelectAgeGroup.setModel(new DefaultComboBoxModel<>(new String[]{
        "0 - 17","18 - 65","66 - 79","80 - 100"

        }));
    }
    
    public void refreshTable() {

        DefaultTableModel model = (DefaultTableModel) tblManagePatient.getModel();
        model.setRowCount(0);

        for (Patient p  : admin.getPatientDirectory().getPatientDirectory()) {
            Object row[] = new Object[6];
            row[0] = p;
            row[1] = p.getPersonId();
            row[2] = p.getPersonAge();
            row[3] = p.getHouse().getHouseName();
            row[4] = p.getHouse().getCommunityName();
            row[5] = p.getHouse().getCityName();


            model.addRow(row);
            
        }
                
    }   
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        ManageScrollPane = new javax.swing.JScrollPane();
        tblManagePatient = new javax.swing.JTable();
        btnAddPatient = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        ViewEncountHistory = new javax.swing.JButton();
        lblSearch = new javax.swing.JLabel();
        lblNumber = new javax.swing.JLabel();
        lblSelectCommunity = new javax.swing.JLabel();
        lblSelectAgeGroup = new javax.swing.JLabel();
        cmbSelectCommunity = new javax.swing.JComboBox<>();
        cmbSelectAgeGroup = new javax.swing.JComboBox<>();
        btnViewAll = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        lblTitle.setFont(new java.awt.Font("微软雅黑", 1, 24)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText(">>>>>Manage Patient Information<<<<<");

        tblManagePatient.setFont(new java.awt.Font("微软雅黑", 1, 10)); // NOI18N
        tblManagePatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Id", "Age", "House", "Community", "City"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ManageScrollPane.setViewportView(tblManagePatient);

        btnAddPatient.setBackground(new java.awt.Color(204, 0, 0));
        btnAddPatient.setFont(new java.awt.Font("微软雅黑", 1, 12)); // NOI18N
        btnAddPatient.setForeground(new java.awt.Color(255, 255, 255));
        btnAddPatient.setText("Add Patient");
        btnAddPatient.setBorderPainted(false);
        btnAddPatient.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAddPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPatientActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(204, 0, 0));
        btnUpdate.setFont(new java.awt.Font("微软雅黑", 1, 12)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update Patient");
        btnUpdate.setBorderPainted(false);
        btnUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(204, 0, 0));
        btnDelete.setFont(new java.awt.Font("微软雅黑", 1, 12)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete Patient");
        btnDelete.setBorderPainted(false);
        btnDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        ViewEncountHistory.setBackground(new java.awt.Color(0, 51, 204));
        ViewEncountHistory.setFont(new java.awt.Font("微软雅黑", 1, 12)); // NOI18N
        ViewEncountHistory.setForeground(new java.awt.Color(255, 255, 255));
        ViewEncountHistory.setText("View Encounter History");
        ViewEncountHistory.setBorderPainted(false);
        ViewEncountHistory.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ViewEncountHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewEncountHistoryActionPerformed(evt);
            }
        });

        lblSearch.setFont(new java.awt.Font("微软雅黑", 3, 12)); // NOI18N
        lblSearch.setText("Number of abnormal patients:");

        lblNumber.setFont(new java.awt.Font("微软雅黑", 1, 18)); // NOI18N
        lblNumber.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNumber.setText("       ");

        lblSelectCommunity.setFont(new java.awt.Font("微软雅黑", 3, 12)); // NOI18N
        lblSelectCommunity.setText("Select Community:");

        lblSelectAgeGroup.setFont(new java.awt.Font("微软雅黑", 3, 12)); // NOI18N
        lblSelectAgeGroup.setText("Select Age Group:");

        cmbSelectCommunity.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        cmbSelectCommunity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbSelectCommunity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSelectCommunityActionPerformed(evt);
            }
        });

        cmbSelectAgeGroup.setFont(new java.awt.Font("微软雅黑", 0, 12)); // NOI18N
        cmbSelectAgeGroup.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbSelectAgeGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSelectAgeGroupActionPerformed(evt);
            }
        });

        btnViewAll.setBackground(new java.awt.Color(0, 0, 0));
        btnViewAll.setFont(new java.awt.Font("微软雅黑", 1, 12)); // NOI18N
        btnViewAll.setForeground(new java.awt.Color(255, 255, 255));
        btnViewAll.setText("Show All Patients");
        btnViewAll.setToolTipText("");
        btnViewAll.setBorderPainted(false);
        btnViewAll.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnViewAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewAllActionPerformed(evt);
            }
        });

        btnSearch.setBackground(new java.awt.Color(0, 51, 204));
        btnSearch.setFont(new java.awt.Font("微软雅黑", 1, 14)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("Search Abnormal Patients");
        btnSearch.setBorderPainted(false);
        btnSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(ManageScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnAddPatient, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ViewEncountHistory, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnViewAll, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE))
                .addGap(6, 6, 6))
            .addGroup(layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblSelectAgeGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(cmbSelectAgeGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblSelectCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(cmbSelectCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(71, Short.MAX_VALUE)
                .addComponent(lblTitle)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ManageScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ViewEncountHistory)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnViewAll, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSelectCommunity)
                    .addComponent(cmbSelectCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSelectAgeGroup)
                    .addComponent(cmbSelectAgeGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(83, 83, 83))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ViewEncountHistory, btnAddPatient, btnDelete, btnUpdate, btnViewAll});

    }// </editor-fold>//GEN-END:initComponents

    private void btnAddPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPatientActionPerformed
        // TODO add your handling code here:
        AddPatientJPanel apjp = new AddPatientJPanel(workAreaJPanel, admin);
        workAreaJPanel.add("AddPatientJPanel", apjp);
        CardLayout layout = (CardLayout) workAreaJPanel.getLayout();
        layout.next(workAreaJPanel);


    }//GEN-LAST:event_btnAddPatientActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblManagePatient.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Please select one patient!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        
        Patient p = (Patient) tblManagePatient.getValueAt(selectedRowIndex, 0);
        
        UpdatePatientJPanel ucjp = new UpdatePatientJPanel(workAreaJPanel, p, admin);
        workAreaJPanel.add("UpdatePatientJPanel", ucjp);
        CardLayout layout = (CardLayout) workAreaJPanel.getLayout();
        layout.next(workAreaJPanel);

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblManagePatient.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Please select one patient !", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        Patient p = (Patient) tblManagePatient.getValueAt(selectedRowIndex, 0);
        admin.getPatientDirectory().removePatient(p);
        JOptionPane.showMessageDialog(this, "Patient deleted.");
        refreshTable();        

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void ViewEncountHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewEncountHistoryActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblManagePatient.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Please select one patient!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        
        Patient p = (Patient) tblManagePatient.getValueAt(selectedRowIndex, 0);
        
        ViewEncounterHistoryJPanel uehjp = new ViewEncounterHistoryJPanel(workAreaJPanel, p,admin);
        workAreaJPanel.add("ViewEncountHistoryJPanel", uehjp);
        CardLayout layout = (CardLayout) workAreaJPanel.getLayout();
        layout.next(workAreaJPanel);
        
    }//GEN-LAST:event_ViewEncountHistoryActionPerformed

    private void cmbSelectCommunityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSelectCommunityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbSelectCommunityActionPerformed

    private void cmbSelectAgeGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSelectAgeGroupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbSelectAgeGroupActionPerformed

    private void btnViewAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewAllActionPerformed
        // TODO add your handling code here:
        refreshTable();
    }//GEN-LAST:event_btnViewAllActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String community = cmbSelectCommunity.getSelectedItem().toString();
        String ageGroup = cmbSelectAgeGroup.getSelectedItem().toString();
        try {
            // TODO add your handling code here:
        PopulateAbnormal(community, ageGroup);
        } catch (ParseException ex) {
            Logger.getLogger(ManageJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnSearchActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane ManageScrollPane;
    private javax.swing.JButton ViewEncountHistory;
    private javax.swing.JButton btnAddPatient;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnViewAll;
    private javax.swing.JComboBox<String> cmbSelectAgeGroup;
    private javax.swing.JComboBox<String> cmbSelectCommunity;
    private javax.swing.JLabel lblNumber;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblSelectAgeGroup;
    private javax.swing.JLabel lblSelectCommunity;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblManagePatient;
    // End of variables declaration//GEN-END:variables
   
    
    
    private void PopulateAbnormal(String community, String ageGroup) throws ParseException {

        DefaultTableModel model = (DefaultTableModel)tblManagePatient.getModel();
        model.setRowCount(0);

        for (Patient p : admin.getPatientDirectory().getPatientDirectory()) {
            if (p.getHouse().getCommunityName().equals(community) && p.getAgeGroup().equals(ageGroup)) {
                try {                    
                    String latestTime= findLatestTime(p);
                    Encounter latestEncounter= findLatestEncounter(p, latestTime);
                    for(Encounter e : p.getEncounterHistory().getEncounterHistory()){
                        if (e == latestEncounter) {
                            Object row[] = new Object[6];
                            row[0] = p;
                            row[1] = p.getPersonId();
                            row[2] = p.getPersonAge();
                            row[3] = p.getHouse().getHouseName();
                            row[4] = p.getHouse().getCommunityName();
                            row[5] = p.getHouse().getCityName();
                        
                            model.addRow(row);                           
                        }
                    }
                } catch (ParseException ex) {
                 Logger.getLogger(ManageJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
               
            }
        }
        int num =model.getRowCount();
        lblNumber.setText(String.valueOf(num));
        
    }
    
    private String findLatestTime(Patient p) throws ParseException {
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date time = df.parse("0000-00-00 00:00:00");
        
            for(Encounter e : p.getEncounterHistory().getEncounterHistory()) {
                Date ctime =df.parse(e.getTime());
                if(time.getTime()<ctime.getTime()){
                     time = ctime;
                }
            }
             String timestring =df.format(time);
             return timestring;
         }

    private Encounter findLatestEncounter(Patient p, String latestTime){
                Encounter en = new Encounter();
                for(Encounter e : p.getEncounterHistory().getEncounterHistory()) {                             
                    if (e.getTime().equals(latestTime) && e.getIsNormal() == false) {
                            en=e;             
                    }
                }
                return en;                
         }

    
    
    
}
