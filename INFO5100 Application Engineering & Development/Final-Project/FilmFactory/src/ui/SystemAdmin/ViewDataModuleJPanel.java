/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.SystemAdmin;

import Ecosystem.Enterprise.Enterprise;
import Ecosystem.FilmFactorySystem;
import Ecosystem.Network.Network;
import Ecosystem.Organization.Organization;
import Ecosystem.UserAccount.UserAccount;
import Ecosystem.WorkQueue.FilmRequest;
import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Panel;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.StandardChartTheme;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.ui.RectangleInsets;

/**
 *
 * @author Eva
 */

public class ViewDataModuleJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewDataModuleJPanel
     */
    JPanel workArea;
    FilmFactorySystem system;
    public ViewDataModuleJPanel(JPanel workArea,FilmFactorySystem system) {
        initComponents();
        this.workArea= workArea;
        this.system = system;
        chart1();
        chart2();
        setSize(750, 530);
        sVGImage1.setSvgImage("UIDesign/undraw_pie_graph_x-9-dy.svg", 230,160);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        chartpane1 = new javax.swing.JPanel();
        chartpane2 = new javax.swing.JPanel();
        sVGImage1 = new UIDesign.SVGImage();

        setBackground(new java.awt.Color(10, 10, 10));

        btnBack.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        chartpane1.setMaximumSize(new java.awt.Dimension(300, 200));
        chartpane1.setMinimumSize(new java.awt.Dimension(300, 200));

        javax.swing.GroupLayout chartpane1Layout = new javax.swing.GroupLayout(chartpane1);
        chartpane1.setLayout(chartpane1Layout);
        chartpane1Layout.setHorizontalGroup(
            chartpane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 330, Short.MAX_VALUE)
        );
        chartpane1Layout.setVerticalGroup(
            chartpane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        chartpane2.setMaximumSize(new java.awt.Dimension(300, 200));
        chartpane2.setMinimumSize(new java.awt.Dimension(300, 200));

        javax.swing.GroupLayout chartpane2Layout = new javax.swing.GroupLayout(chartpane2);
        chartpane2.setLayout(chartpane2Layout);
        chartpane2Layout.setHorizontalGroup(
            chartpane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 330, Short.MAX_VALUE)
        );
        chartpane2Layout.setVerticalGroup(
            chartpane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chartpane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addComponent(chartpane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(147, 147, 147)
                        .addComponent(sVGImage1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(34, 34, 34))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sVGImage1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chartpane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chartpane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        workArea.remove(this);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.previous(workArea);
    }//GEN-LAST:event_btnBackActionPerformed
    
    public void chart1(){
        
        DefaultPieDataset dataset = new DefaultPieDataset();
        dataset.setValue("Customer", sumCustomer());
        dataset.setValue("FilmAdmin", sumFilmAdmin());
        dataset.setValue("Director", sumDirector());
        dataset.setValue("Scriptwriter", sumScriptwriter());
        dataset.setValue("Cameraman", sumCameraman());
        dataset.setValue("Auditor", sumAuditor());
        dataset.setValue("CinemaAdmin", sumCinemaAdmin());
        dataset.setValue("CinemaEmployee", sumCinemaEmployee());
        
        JFreeChart chart = ChartFactory.createPieChart3D("User Distribution", dataset,true,true,true);
        
        PiePlot piePlot = (PiePlot)chart.getPlot();
        
        piePlot.setSectionPaint("Customer", new Color(132,138,113));
        piePlot.setSectionPaint("FilmAdmin", new Color(203,205,177));
        piePlot.setSectionPaint("Director", new Color(143,188,143));
        piePlot.setSectionPaint("Scriptwriter", new Color(144,238,144));
        piePlot.setSectionPaint("Cameraman", new Color(60,179,113));
        piePlot.setSectionPaint("Auditor", new Color(67,182,67));
        piePlot.setSectionPaint("CinemaAdmin", new Color(34,139,34));
        piePlot.setSectionPaint("CinemaEmployee", new Color(60,94,58));
        piePlot.setOutlineVisible(false);
        
//        PieSectionLabelGenerator gen = new StandardPieSectionLabelGenerator(
//            "{0}: {1} ({2})", new DecimalFormat("0"), new DecimalFormat("0%"));
//        piePlot.setLabelGenerator(gen);   
        piePlot.setLabelGenerator(null);   
        Color trans = new Color(0xFF, 0xFF, 0xFF, 0);
        piePlot.setBackgroundPaint(new Color(10,10,10));
        
        chart.getTitle().setPaint(Color.white);
        chart.setBackgroundPaint(new Color(10,10,10));
        chart.getLegend().setBackgroundPaint(trans);
        chart.getLegend().setItemPaint(Color.white);
        ChartPanel paneChart = new ChartPanel(chart);

        chartpane1.removeAll();
        chartpane1.setSize(330, 300);
        paneChart.setSize(new java.awt.Dimension(chartpane1.getWidth(), chartpane1.getHeight()));
        chartpane1.add(paneChart);
        chartpane1.validate();
        
    }

    public void chart2(){
        DefaultPieDataset dataset = new DefaultPieDataset();
        dataset.setValue("Romantic", sumRomantic());
        dataset.setValue("Adventure", sumAdventure());
        dataset.setValue("Action", sumAction());
        dataset.setValue("Criminal", sumCriminal());
        
        JFreeChart chart = ChartFactory.createPieChart3D("Completed Movies Distribution", dataset,true,true,true);
        
        PiePlot piePlot = (PiePlot)chart.getPlot();
        
        piePlot.setSectionPaint("Romantic", new Color(203,205,177));
        piePlot.setSectionPaint("Adventure", new Color(143,188,143));
        piePlot.setSectionPaint("Action", new Color(144,238,144));
        piePlot.setSectionPaint("Criminal", new Color(60,179,113));
        piePlot.setOutlineVisible(false);
        
//        PieSectionLabelGenerator gen = new StandardPieSectionLabelGenerator(
//            "{0}: {1} ({2})", new DecimalFormat("0"), new DecimalFormat("0%"));
//        piePlot.setLabelGenerator(gen);   
        piePlot.setLabelGenerator(null);   
        Color trans = new Color(0xFF, 0xFF, 0xFF, 0);
        piePlot.setBackgroundPaint(new Color(10,10,10));
        
        chart.getTitle().setPaint(Color.white);
        chart.setBackgroundPaint(new Color(10,10,10));
        chart.getLegend().setBackgroundPaint(trans);
        chart.getLegend().setItemPaint(Color.white);
        ChartPanel paneChart = new ChartPanel(chart);

        chartpane2.removeAll();
        chartpane2.setSize(330, 300);
        paneChart.setSize(new java.awt.Dimension(chartpane2.getWidth(), chartpane2.getHeight()));
        chartpane2.add(paneChart);
        chartpane2.validate();
        
    }

    public int sumCustomer(){
        int cusNum = 0;
        for(Network network:system.getNetworkList()) {
            for (Enterprise enterprise: network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise.getEnterpriseType().toString().equals("CustomerEn")) {
                    for(Organization org: enterprise.getOrganizationDirectory().getOrganizationList()) {
                        for(UserAccount ua: org.getUserAccountDirectory().getUserAccountList()) {
                            if (ua.getRole().toString().equals("Customer")) {
                                cusNum++;                                                               
                            }
                        }
                    }
                }
            }
        }       
    return cusNum;
    }
    
    public int sumFilmAdmin(){
        int fadNum = 0;
        for(Network network:system.getNetworkList()) {
            for (Enterprise enterprise: network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise.getEnterpriseType().toString().equals("FilmEn")) {
                    for(Organization org: enterprise.getOrganizationDirectory().getOrganizationList()) {
                        for(UserAccount ua: org.getUserAccountDirectory().getUserAccountList()) {
                            if (ua.getRole().toString().equals("FilmAdmin")) {
                                fadNum++;                                                               
                            }
                        }
                    }
                }
            }
        }       
    return fadNum;
    }
    
    public int sumDirector(){
        int dirNum = 0;
        for(Network network:system.getNetworkList()) {
            for (Enterprise enterprise: network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise.getEnterpriseType().toString().equals("FilmEn")) {
                    for(Organization org: enterprise.getOrganizationDirectory().getOrganizationList()) {
                        for(UserAccount ua: org.getUserAccountDirectory().getUserAccountList()) {
                            if (ua.getRole().toString().equals("FilmDirector")) {
                                dirNum++;                                                               
                            }
                        }
                    }
                }
            }
        }       
    return dirNum;
    }

    public int sumScriptwriter(){
        int scrNum = 0;
        for(Network network:system.getNetworkList()) {
            for (Enterprise enterprise: network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise.getEnterpriseType().toString().equals("FilmEn")) {
                    for(Organization org: enterprise.getOrganizationDirectory().getOrganizationList()) {
                        for(UserAccount ua: org.getUserAccountDirectory().getUserAccountList()) {
                            if (ua.getRole().toString().equals("FilmScriptwriter")) {
                                scrNum++;                                                               
                            }
                        }
                    }
                }
            }
        }       
    return scrNum;
    }

    public int sumCameraman(){
        int camNum = 0;
        for(Network network:system.getNetworkList()) {
            for (Enterprise enterprise: network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise.getEnterpriseType().toString().equals("FilmEn")) {
                    for(Organization org: enterprise.getOrganizationDirectory().getOrganizationList()) {
                        for(UserAccount ua: org.getUserAccountDirectory().getUserAccountList()) {
                            if (ua.getRole().toString().equals("FilmCameraman")) {
                                camNum++;                                                               
                            }
                        }
                    }
                }
            }
        }       
    return camNum;
    }
    
    public int sumAuditor(){
        int audNum = 0;
        for(Network network:system.getNetworkList()) {
            for (Enterprise enterprise: network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise.getEnterpriseType().toString().equals("ReviewEn")) {
                    for(Organization org: enterprise.getOrganizationDirectory().getOrganizationList()) {
                        for(UserAccount ua: org.getUserAccountDirectory().getUserAccountList()) {
                            if (ua.getRole().toString().equals("ReviewAuditor")) {
                                audNum++;                                                               
                            }
                        }
                    }
                }
            }
        }       
    return audNum;
    }
    
    public int sumCinemaAdmin(){
        int cadNum = 0;
        for(Network network:system.getNetworkList()) {
            for (Enterprise enterprise: network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise.getEnterpriseType().toString().equals("CinemaEn")) {
                    for(Organization org: enterprise.getOrganizationDirectory().getOrganizationList()) {
                        for(UserAccount ua: org.getUserAccountDirectory().getUserAccountList()) {
                            if (ua.getRole().toString().equals("CinemaManager")) {
                                cadNum++;                                                               
                            }
                        }
                    }
                }
            }
        }       
    return cadNum;
    }
    
    public int sumCinemaEmployee(){
        int ceeNum = 0;
        for(Network network:system.getNetworkList()) {
            for (Enterprise enterprise: network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise.getEnterpriseType().toString().equals("CinemaEn")) {
                    for(Organization org: enterprise.getOrganizationDirectory().getOrganizationList()) {
                        for(UserAccount ua: org.getUserAccountDirectory().getUserAccountList()) {
                            if (ua.getRole().toString().equals("CinemaEmployee")) {
                                ceeNum++;                                                               
                            }
                        }
                    }
                }
            }
        }       
    return ceeNum;
    }

    public int sumRomantic(){
        int romNum = 0;
        for(Network network:system.getNetworkList()) {
            for (Enterprise enterprise: network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise.getEnterpriseType().toString().equals("CinemaEn")) {
                    for(Organization org: enterprise.getOrganizationDirectory().getOrganizationList()) {
                        for(UserAccount ua: org.getUserAccountDirectory().getUserAccountList()) {
                            if (ua.getRole().toString().equals("CinemaManager")) {
                                for(FilmRequest frq: ua.getFilmQueue().getFilmRequestList()){
                                    if(frq.getStatus().equals("Finish the Review")&&frq.getMovie().getType().equals("Romantic")) {
                                        romNum++;
                                    }                              
                                }                                                           
                            }
                        }
                    }
                }
            }
        }          
        return romNum;
    }

    public int sumAdventure(){
        int advNum = 0;
        for(Network network:system.getNetworkList()) {
            for (Enterprise enterprise: network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise.getEnterpriseType().toString().equals("CinemaEn")) {
                    for(Organization org: enterprise.getOrganizationDirectory().getOrganizationList()) {
                        for(UserAccount ua: org.getUserAccountDirectory().getUserAccountList()) {
                            if (ua.getRole().toString().equals("CinemaManager")) {
                                for(FilmRequest frq: ua.getFilmQueue().getFilmRequestList()){
                                    if(frq.getStatus().equals("Finish the Review")&&frq.getMovie().getType().equals("Adventure")) {
                                        advNum++;
                                    }                              
                                }                                                           
                            }
                        }
                    }
                }
            }
        }          
        return advNum;
    }
    public int sumAction(){
        int actNum = 0;
        for(Network network:system.getNetworkList()) {
            for (Enterprise enterprise: network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise.getEnterpriseType().toString().equals("CinemaEn")) {
                    for(Organization org: enterprise.getOrganizationDirectory().getOrganizationList()) {
                        for(UserAccount ua: org.getUserAccountDirectory().getUserAccountList()) {
                            if (ua.getRole().toString().equals("CinemaManager")) {
                                for(FilmRequest frq: ua.getFilmQueue().getFilmRequestList()){
                                    if(frq.getStatus().equals("Finish the Review")&&frq.getMovie().getType().equals("Action")) {
                                        actNum++;
                                    }                              
                                }                                                           
                            }
                        }
                    }
                }
            }
        }          
        return actNum;
    }

    public int sumCriminal(){
        int criNum = 0;
        for(Network network:system.getNetworkList()) {
            for (Enterprise enterprise: network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise.getEnterpriseType().toString().equals("CinemaEn")) {
                    for(Organization org: enterprise.getOrganizationDirectory().getOrganizationList()) {
                        for(UserAccount ua: org.getUserAccountDirectory().getUserAccountList()) {
                            if (ua.getRole().toString().equals("CinemaManager")) {
                                for(FilmRequest frq: ua.getFilmQueue().getFilmRequestList()){
                                    if(frq.getStatus().equals("Finish the Review")&&frq.getMovie().getType().equals("Criminal")) {
                                        criNum++;
                                    }                              
                                }                                                           
                            }
                        }
                    }
                }
            }
        }          
        return criNum;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JPanel chartpane1;
    private javax.swing.JPanel chartpane2;
    private UIDesign.SVGImage sVGImage1;
    // End of variables declaration//GEN-END:variables
}
